"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[788],{5242:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"Patrones_de_diseno_de_comportamiento/Memento","title":"Memento","description":"---","source":"@site/docs/Patrones_de_diseno_de_comportamiento/Memento.md","sourceDirName":"Patrones_de_diseno_de_comportamiento","slug":"/Patrones_de_diseno_de_comportamiento/Memento","permalink":"/Documentacion_PDC/docs/Patrones_de_diseno_de_comportamiento/Memento","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Patrones_de_diseno_de_comportamiento/Memento.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Mediator.","permalink":"/Documentacion_PDC/docs/Patrones_de_diseno_de_comportamiento/Mediator"},"next":{"title":"Observer","permalink":"/Documentacion_PDC/docs/Patrones_de_diseno_de_comportamiento/Observer"}}');var r=t(4848),a=t(8453);const s={sidebar_position:6},i="Memento",d={},l=[{value:"Definicion",id:"definicion",level:2},{value:"Proposito",id:"proposito",level:2},{value:"Caracteristicas",id:"caracteristicas",level:2},{value:"Ventajas y Desventajas",id:"ventajas-y-desventajas",level:2},{value:"Ejemplo de Uso en Codigo",id:"ejemplo-de-uso-en-codigo",level:2},{value:"Analogia",id:"analogia",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"memento",children:"Memento"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"definicion",children:"Definicion"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Es un patr\xf3n de dise\xf1o de comportamiento que permite almacenar el estado interno de un objeto en un contenedor independiente llamado memento, este contenedor encapsula los detalles del estado sin exponer la implementaci\xf3n interna del objeto original"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://refactoring.guru/images/patterns/content/memento/memento-es.png?id=425d7fafd404116e99e93c3d8a04ec89",alt:"Memento"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"proposito",children:"Proposito"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Permitir guardar y restaurar el estado de un objeto sin comprometer su encapsulamiento."})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Permitir guardar y restaurar el estado previo de un objeto sin revelar los detalles de su implementaci\xf3n."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"caracteristicas",children:"Caracteristicas"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"El Encapsulamiento del estado interno"})})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El estado del objeto (Originator) se guarda dentro del Memento de manera encapsulada."}),"\n",(0,r.jsx)(n.li,{children:"Los detalles del estado interno no son accesibles para otros objetos, como el Caretaker."}),"\n",(0,r.jsx)(n.li,{children:"Garantiza la protecci\xf3n del encapsulamiento del objeto principal."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"La Independencia entre objeto y almacenamiento"})})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El objeto que desea guardar su estado (el Originator) no necesita gestionar directamente los estados hist\xf3ricos."}),"\n",(0,r.jsx)(n.li,{children:"El almacenamiento y recuperaci\xf3n de los estados se delega al Caretaker, que administra los Mementos."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"La Restauraci\xf3n de estados"})})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Permite revertir un objeto a un estado previo mediante el uso del Memento."}),"\n",(0,r.jsx)(n.li,{children:"Los estados almacenados pueden recuperarse de forma sencilla y confiable."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"La Transparencia"})})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"El Memento es opaco para el Caretaker; este \xfaltimo no necesita saber qu\xe9 contiene ni c\xf3mo funciona el Memento."}),"\n",(0,r.jsx)(n.li,{children:"Solo el Originator sabe c\xf3mo guardar y restaurar su estado desde un Memento."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"ventajas-y-desventajas",children:"Ventajas y Desventajas"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Ventajas"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Desventajas"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Preserva el encapsulamiento."}),(0,r.jsx)(n.td,{children:"Alto consumo de memoria"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Implementacion de deshacer y rehacer"}),(0,r.jsx)(n.td,{children:"Sobrecarga en el rendimiento"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Separaci\xf3n de responsabilidades"}),(0,r.jsx)(n.td,{children:"Complejidad adicional"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"F\xe1cil de extender"}),(0,r.jsx)(n.td,{children:"Manejo de estados complejos"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Reutilizaci\xf3n de l\xf3gica"}),(0,r.jsx)(n.td,{children:"No es adecuado para sistemas con estados dependientes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"No afecta la estructura del objeto"}),(0,r.jsx)(n.td,{children:"Problemas de sincronizaci\xf3n"})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"ejemplo-de-uso-en-codigo",children:"Ejemplo de Uso en Codigo"}),"\n",(0,r.jsx)(n.p,{children:'Aqui se implementa el Patr\xf3n Memento para guardar y restaurar el estado de un objeto, la clase Memento almacena de forma inmutable el estado del editor de texto, la clase TextEditor permite modificar el contenido (setContent), guardar el estado actual en un Memento con save y restaurarlo con restore, en el programa principal, el editor guarda el contenido inicial "Hola, mundo" lo modifica a "Texto modificado" y luego lo restaura al estado guardado, este patr\xf3n es \xfatil para implementar funcionalidades como "deshacer" sin exponer los detalles internos del objeto.'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'class Memento {\r\n    private final String state;\r\n    Memento(String state) { this.state = state; }\r\n    String getState() { return state; }\r\n}\r\n\r\nclass TextEditor {\r\n    private String content;\r\n    void setContent(String content) { this.content = content; }\r\n    String getContent() { return content; }\r\n    Memento save() { return new Memento(content); }\r\n    void restore(Memento m) { content = m.getState(); }\r\n}\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        TextEditor editor = new TextEditor();\r\n        Memento saved;\r\n\r\n        editor.setContent("Hola, mundo.");\r\n        System.out.println("Estado actual: " + editor.getContent());\r\n\r\n        saved = editor.save();\r\n\r\n        editor.setContent("Texto modificado.");\r\n        System.out.println("Estado modificado: " + editor.getContent());\r\n\r\n        editor.restore(saved); \r\n        System.out.println("Estado restaurado: " + editor.getContent());\r\n    }\r\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"analogia",children:"Analogia"}),"\n",(0,r.jsx)(n.p,{children:"Un escritor trabaja en su libro y, de vez en cuando, hace fotocopias de lo que ha escrito hasta ese momento, estas fotocopias capturan exactamente el estado del libro en un punto espec\xedfico, si en alg\xfan momento no le gusta c\xf3mo avanza la historia, puede regresar a una fotocopia anterior y continuar desde all\xed."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Permite guardar el estado de un objeto en un momento dado y restaurarlo m\xe1s adelante, sin que se revelen los detalles internos del objeto."}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var o=t(6540);const r={},a=o.createContext(r);function s(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);