"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[59],{9259:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Patrones_de_diseno_de_comportamiento/Observer","title":"Observer","description":"---","source":"@site/docs/Patrones_de_diseno_de_comportamiento/Observer.md","sourceDirName":"Patrones_de_diseno_de_comportamiento","slug":"/Patrones_de_diseno_de_comportamiento/Observer","permalink":"/Documentacion_PDC/docs/Patrones_de_diseno_de_comportamiento/Observer","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Patrones_de_diseno_de_comportamiento/Observer.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Memento","permalink":"/Documentacion_PDC/docs/Patrones_de_diseno_de_comportamiento/Memento"},"next":{"title":"State","permalink":"/Documentacion_PDC/docs/Patrones_de_diseno_de_comportamiento/State"}}');var a=r(4848),i=r(8453);const t={sidebar_position:7},o="Observer",d={},c=[{value:"Definicion",id:"definicion",level:2},{value:"Proposito",id:"proposito",level:2},{value:"Caracteristicas",id:"caracteristicas",level:2},{value:"Ventajas y Desventajas",id:"ventajas-y-desventajas",level:2},{value:"Ejemplo de Uso en Codigo",id:"ejemplo-de-uso-en-codigo",level:2},{value:"Analogia",id:"analogia",level:2}];function l(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"observer",children:"Observer"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"definicion",children:"Definicion"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"Es un patr\xf3n de comportamiento que establece una relaci\xf3n de dependencias entre objetos, de modo que cuando el estado de un objeto (el sujeto o subject) cambia, todos sus objetos dependientes"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"https://refactoring.guru/images/patterns/content/observer/observer-comic-1-pt-br.png?id=adfe141b54d9d26143d611158896597b",alt:"Observer"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"proposito",children:"Proposito"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.em,{children:"Proporcionar una manera eficiente y flexible."})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Nos ayudara a gestionar la notificaci\xf3n de cambios en el estado de un objeto a sus objetos dependientes sin necesidad de que estos est\xe9n estrechamente acoplados entre s\xed."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"caracteristicas",children:"Caracteristicas"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.em,{children:"Desacoplamiento entre Sujeto y Observadores"})})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"El sujeto y los observadores est\xe1n desacoplados. El sujeto no conoce los detalles de los observadores, solo les notifica cuando su estado cambia. Los observadores, a su vez, no necesitan saber nada sobre el sujeto, solo reaccionan al cambio."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.em,{children:"Notificaci\xf3n autom\xe1tica"})})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Cuando el estado del sujeto cambia, el patr\xf3n garantiza que todos los observadores registrados sean notificados autom\xe1ticamente sin necesidad de intervenci\xf3n directa. La actualizaci\xf3n es autom\xe1tica y en tiempo real."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.em,{children:"Multiplicidad de Observadores"})})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Un \xfanico sujeto puede tener m\xfaltiples observadores registrados. Esto permite que varios objetos reaccionen a los mismos cambios de estado de manera independiente."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.em,{children:"Independencia de los Observadores"})})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Los observadores no necesitan conocer a otros observadores ni compartir datos entre s\xed. Cada observador act\xfaa de manera independiente en funci\xf3n de la notificaci\xf3n que recibe."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"ventajas-y-desventajas",children:"Ventajas y Desventajas"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"Ventajas"})}),(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"Desventajas"})})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Desacoplamiento entre Sujeto y Observadores"}),(0,a.jsx)(n.td,{children:"Dependencia del n\xfamero de Observadores"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"F\xe1cil expansi\xf3n"}),(0,a.jsx)(n.td,{children:"Complejidad en la gesti\xf3n de notificaciones"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Actualizaci\xf3n autom\xe1tica"}),(0,a.jsx)(n.td,{children:"Riesgo de notificaciones desincronizadas"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Mejor mantenimiento y refactorizaci\xf3n"}),(0,a.jsx)(n.td,{children:"Gesti\xf3n de eliminaci\xf3n de observadores"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"Desempe\xf1o flexible"}),(0,a.jsx)(n.td,{children:"Uso excesivo de memoria"})]})]})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"ejemplo-de-uso-en-codigo",children:"Ejemplo de Uso en Codigo"}),"\n",(0,a.jsx)(n.p,{children:"Aqui implementa el Patr\xf3n Observer, donde una estaci\xf3n meteorol\xf3gica notifica a una aplicaci\xf3n sobre cambios en la temperatura, la interfaz Observer define el m\xe9todo update, que los observadores deben implementar para recibir actualizaciones, la clase WeatherStation act\xfaa como el sujeto que mantiene una lista de observadores y los notifica cuando cambia la temperatura y la clase WeatherApp implementa la interfaz Observer y muestra la temperatura cuando es actualizada, en el ejemplo, la estaci\xf3n registra la aplicaci\xf3n como observador, y cuando se cambia la temperatura, la aplicaci\xf3n recibe las actualizaciones autom\xe1ticamente, este patr\xf3n es \xfatil para sistemas donde varios componentes deben reaccionar a cambios en un objeto central, como en aplicaciones meteorol\xf3gicas o financieras."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'import java.util.ArrayList;\r\nimport java.util.List;\r\n\r\ninterface Observer {\r\n    void update(float temperature);\r\n}\r\n\r\nclass WeatherStation {\r\n    private List<Observer> observers = new ArrayList<>();\r\n    private float temperature;\r\n\r\n    void registerObserver(Observer observer) { observers.add(observer); }\r\n    void removeObserver(Observer observer) { observers.remove(observer); }\r\n\r\n    void setTemperature(float temperature) {\r\n        this.temperature = temperature;\r\n        for (Observer observer : observers) {\r\n            observer.update(temperature);\r\n        }\r\n    }\r\n}\r\n\r\nclass WeatherApp implements Observer {\r\n    @Override\r\n    public void update(float temperature) {\r\n        System.out.println("WeatherApp: Temperatura actual: " + temperature + "\xb0C");\r\n    }\r\n}\r\n\r\npublic class ObserverPatternExample {\r\n    public static void main(String[] args) {\r\n        WeatherStation station = new WeatherStation();\r\n        WeatherApp app = new WeatherApp();\r\n\r\n        station.registerObserver(app);\r\n        station.setTemperature(25.5f);\r\n        station.setTemperature(30.0f);\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"analogia",children:"Analogia"}),"\n",(0,a.jsx)(n.p,{children:"Un presentador de televisi\xf3n realiza anuncios en vivo, cada miembro de la audiencia, al estar sintonizado, recibe las actualizaciones en tiempo real, si alguien cambia de canal, deja de recibir los mensajes, de igual forma, nuevos espectadores que sintonizan el programa comienzan a recibir las notificaciones autom\xe1ticamente."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Un sujeto notifica autom\xe1ticamente a todos los observadores suscritos cuando ocurre un cambio, y estos pueden suscribirse o retirarse en cualquier momento."}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>o});var s=r(6540);const a={},i=s.createContext(a);function t(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);