"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[38],{95:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>t,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"Patrones_de_diseno_de_comportamiento/Visitor","title":"Visitor","description":"--------------","source":"@site/docs/Patrones_de_diseno_de_comportamiento/Visitor.md","sourceDirName":"Patrones_de_diseno_de_comportamiento","slug":"/Patrones_de_diseno_de_comportamiento/Visitor","permalink":"/Documentacion_PDC/docs/Patrones_de_diseno_de_comportamiento/Visitor","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Patrones_de_diseno_de_comportamiento/Visitor.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11},"sidebar":"tutorialSidebar","previous":{"title":"Template Method","permalink":"/Documentacion_PDC/docs/Patrones_de_diseno_de_comportamiento/Template-Method"}}');var r=a(4848),i=a(8453);const t={sidebar_position:11},o="Visitor",c={},l=[{value:"Definici\xf3n",id:"definici\xf3n",level:2},{value:"Prop\xf3sito",id:"prop\xf3sito",level:2},{value:"Caracter\xedsticas principales",id:"caracter\xedsticas-principales",level:2},{value:"Ventajas y Desventajas",id:"ventajas-y-desventajas",level:2},{value:"Ejemplo de c\xf3digo en Python",id:"ejemplo-de-c\xf3digo-en-python",level:2},{value:"Analog\xeda",id:"analog\xeda",level:2}];function d(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"visitor",children:"Visitor"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"definici\xf3n",children:"Definici\xf3n"}),"\n",(0,r.jsx)(s.p,{children:"El patr\xf3n Visitor es un patr\xf3n de dise\xf1o de comportamiento que permite separar un algoritmo de la estructura de objetos sobre la que opera. Agrega nuevas operaciones a una clase sin modificar su estructura, utilizando un objeto externo (el visitante) para realizar las operaciones."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{src:"https://refactoring.guru/images/patterns/diagrams/visitor/structure-es.png",alt:"Patron VIsitor"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"prop\xf3sito",children:"Prop\xf3sito"}),"\n",(0,r.jsx)(s.p,{children:"El prop\xf3sito de Visitor es agregar nuevas funcionalidades a una jerarqu\xeda de clases sin alterar sus definiciones, manteniendo la estructura fija. Esto es especialmente \xfatil cuando las operaciones sobre las clases cambian con m\xe1s frecuencia que las clases mismas."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{src:"https://refactoring.guru/images/patterns/content/visitor/visitor.png",alt:"ilustraci\xf3n representativa Visitor"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"caracter\xedsticas-principales",children:"Caracter\xedsticas principales"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Separaci\xf3n de responsabilidades:"})}),"\n",(0,r.jsx)(s.p,{children:"El patr\xf3n divide la l\xf3gica de operaci\xf3n (algoritmos) de la estructura de objetos. Esto permite modificar o agregar nuevos comportamientos sin alterar las clases base o concretas."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Doble despacho"})}),"\n",(0,r.jsx)(s.p,{children:"El patr\xf3n Visitor se basa en el doble despacho, lo que significa que:"}),"\n",(0,r.jsx)(s.p,{children:"1.- El objeto a visitar acepta al visitante."}),"\n",(0,r.jsx)(s.p,{children:"2.- El visitante ejecuta la operaci\xf3n correspondiente seg\xfan el tipo de objeto."}),"\n",(0,r.jsx)(s.p,{children:"Esto permite que la operaci\xf3n se ajuste al tipo de ambos: el objeto visitado y el visitante."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Extensibilidad"})}),"\n",(0,r.jsx)(s.p,{children:"Puedes agregar nuevas operaciones creando nuevos visitantes, sin necesidad de modificar la jerarqu\xeda de clases. Esto hace que el patr\xf3n sea altamente extensible para agregar funcionalidades."}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Acoplamiento"})}),"\n",(0,r.jsx)(s.p,{children:"El patr\xf3n introduce un alto acoplamiento entre el visitante y la jerarqu\xeda de clases, ya que el visitante debe conocer los detalles de cada clase para operar correctamente"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"ventajas-y-desventajas",children:"Ventajas y Desventajas"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Ventajas"}),(0,r.jsx)(s.th,{children:"Desventajas"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Facilita la adici\xf3n de nuevas operaciones sin modificar las clases base."}),(0,r.jsx)(s.td,{children:"Introduce un alto acoplamiento entre el visitante y las clases."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Separa la l\xf3gica de operaciones de la estructura de objetos."}),(0,r.jsx)(s.td,{children:"Puede ser dif\xedcil de mantener si se agrega una nueva clase en la jerarqu\xeda de objetos."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Promueve la organizaci\xf3n del c\xf3digo al mover algoritmos fuera de las clases."}),(0,r.jsx)(s.td,{children:"Si las clases cambian frecuentemente, se requiere actualizar todos los visitantes."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"Permite manejar diferentes tipos de objetos de manera uniforme."}),(0,r.jsx)(s.td,{children:"No es ideal si la jerarqu\xeda de clases cambia m\xe1s frecuentemente que las operaciones."})]})]})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"ejemplo-de-c\xf3digo-en-python",children:"Ejemplo de c\xf3digo en Python"}),"\n",(0,r.jsx)(s.p,{children:"El patr\xf3n Visitor separa las operaciones de la estructura de objetos sobre la que act\xfaan. En el ejemplo, diferentes formas geom\xe9tricas (Circle, Square) aceptan un visitante (AreaCalculator) que realiza una operaci\xf3n espec\xedfica. Esto permite agregar nuevas operaciones sin modificar las clases de los objetos."}),"\n",(0,r.jsx)(s.p,{children:"Clave: Ideal para agregar funcionalidades sin alterar las clases base."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'from abc import ABC, abstractmethod\r\n\r\n# Elemento base que acepta un visitante\r\nclass Shape(ABC):\r\n    @abstractmethod\r\n    def accept(self, visitor):\r\n        pass\r\n\r\n# Subclases concretas\r\nclass Circle(Shape):\r\n    def accept(self, visitor):\r\n        visitor.visit_circle(self)\r\n\r\nclass Square(Shape):\r\n    def accept(self, visitor):\r\n        visitor.visit_square(self)\r\n\r\n# Visitante base\r\nclass Visitor(ABC):\r\n    @abstractmethod\r\n    def visit_circle(self, circle):\r\n        pass\r\n\r\n    @abstractmethod\r\n    def visit_square(self, square):\r\n        pass\r\n\r\n# Visitante concreto\r\nclass AreaCalculator(Visitor):\r\n    def visit_circle(self, circle):\r\n        print("Calculating area of the circle.")\r\n    \r\n    def visit_square(self, square):\r\n        print("Calculating area of the square.")\r\n\r\n# Uso del patr\xf3n\r\nshapes = [Circle(), Square()]\r\nvisitor = AreaCalculator()\r\n\r\nfor shape in shapes:\r\n    shape.accept(visitor)\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"analog\xeda",children:"Analog\xeda"}),"\n",(0,r.jsx)(s.p,{children:"Imagina un experimentado agente de seguros que est\xe1 deseoso de conseguir nuevos clientes. Puede visitar todos los edificios de un barrio, intentando vender seguros a todo aquel que se va encontrando. Dependiendo del tipo de organizaci\xf3n que ocupe el edificio, puede ofrecer p\xf3lizas de seguro especializadas:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Si es un edificio residencial, vende seguros m\xe9dicos."}),"\n",(0,r.jsx)(s.li,{children:"Si es un banco, vende seguros contra robos."}),"\n",(0,r.jsx)(s.li,{children:"Si es una cafeter\xeda, vende seguros contra incendios e inundaciones."}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{src:"https://refactoring.guru/images/patterns/content/visitor/visitor-comic-1.png",alt:"Ilustraci\xf3n de Analog\xeda Visitor"})})]})}function p(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,s,a)=>{a.d(s,{R:()=>t,x:()=>o});var n=a(6540);const r={},i=n.createContext(r);function t(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);