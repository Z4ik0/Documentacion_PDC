"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[639],{1416:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Patrones_de_diseno_de_comportamiento/Mediator","title":"Mediator.","description":"Definici\xf3n.","source":"@site/docs/Patrones_de_diseno_de_comportamiento/Mediator.md","sourceDirName":"Patrones_de_diseno_de_comportamiento","slug":"/Patrones_de_diseno_de_comportamiento/Mediator","permalink":"/Documentacion_PDC/docs/Patrones_de_diseno_de_comportamiento/Mediator","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Patrones_de_diseno_de_comportamiento/Mediator.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Iterator.","permalink":"/Documentacion_PDC/docs/Patrones_de_diseno_de_comportamiento/Iterator"},"next":{"title":"Memento","permalink":"/Documentacion_PDC/docs/Patrones_de_diseno_de_comportamiento/Memento"}}');var i=o(4848),s=o(8453);const a={sidebar_position:5},t="Mediator.",d={},c=[{value:"Definici\xf3n.",id:"definici\xf3n",level:2},{value:"Proposito.",id:"proposito",level:2},{value:"Caracter\xedsticas Principales.",id:"caracter\xedsticas-principales",level:2},{value:"Ventajas y Desventajas.",id:"ventajas-y-desventajas",level:2},{value:"Ejemplo.",id:"ejemplo",level:2},{value:"Analog\xeda.",id:"analog\xeda",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"mediator",children:"Mediator."})}),"\n",(0,i.jsx)(n.h2,{id:"definici\xf3n",children:"Definici\xf3n."}),"\n",(0,i.jsx)(n.p,{children:"El patr\xf3n Mediator define un objeto que centraliza la comunicaci\xf3n entre un conjunto de objetos, evitando que estos se comuniquen directamente entre s\xed. En lugar de hacerlo, todos los objetos interact\xfaan con el mediador, que gestiona y coordina las interacciones. Esto reduce el acoplamiento entre los objetos y mejora la mantenibilidad del sistema."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://refactoring.guru/images/patterns/diagrams/mediator/structure.png",alt:"estructura"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"proposito",children:"Proposito."}),"\n",(0,i.jsx)(n.p,{children:"Mediator es un patr\xf3n de dise\xf1o de comportamiento que te permite reducir las dependencias ca\xf3ticas entre objetos. El patr\xf3n restringe las comunicaciones directas entre los objetos, forz\xe1ndolos a colaborar \xfanicamente a trav\xe9s de un objeto mediador."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"caracter\xedsticas-principales",children:"Caracter\xedsticas Principales."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Centralizaci\xf3n:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Todas las interacciones entre los objetos pasan por un mediador central."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Desacoplamiento:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Los objetos no necesitan conocer los detalles de otros objetos con los que interact\xfaan."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Coordinaci\xf3n Simplificada:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"El mediador se encarga de manejar la l\xf3gica de interacci\xf3n entre los objetos."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Mantenibilidad Mejorada:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Cambios en un objeto o en las interacciones no afectan directamente a otros objetos."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"ventajas-y-desventajas",children:"Ventajas y Desventajas."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Ventajas"})}),(0,i.jsx)(n.th,{children:(0,i.jsx)(n.strong,{children:"Desventajas"})})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Reducci\xf3n de dependencias"}),": Minimiza las dependencias entre objetos, haciendo que est\xe9n menos acoplados y sean m\xe1s f\xe1ciles de modificar."]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Sobrecarga del mediador"}),': El mediador puede convertirse en un "Dios" que maneja demasiada l\xf3gica, lo que dificulta su mantenimiento.']})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Facilita la escalabilidad"}),": Permite agregar nuevos objetos o cambiar los existentes sin afectar a otros objetos relacionados."]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Complejidad del mediador"}),": A medida que crece el n\xfamero de objetos y la l\xf3gica de interacci\xf3n, el mediador puede volverse complicado."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Centralizaci\xf3n de la l\xf3gica"}),": La l\xf3gica de interacci\xf3n entre objetos se centraliza en el mediador, simplificando la colaboraci\xf3n."]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"P\xe9rdida de flexibilidad"}),": Toda la interacci\xf3n entre objetos depende del mediador, lo que limita soluciones alternativas."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"C\xf3digo m\xe1s limpio"}),": Reduce la complejidad del c\xf3digo al evitar comunicaciones directas entre m\xfaltiples objetos."]}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Punto \xfanico de fallo"}),": Si el mediador tiene un error o falla, toda la interacci\xf3n entre objetos se ve afectada."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Mejora la reutilizaci\xf3n"}),": Los objetos individuales son m\xe1s reutilizables porque no est\xe1n acoplados a otros objetos espec\xedficos."]}),(0,i.jsx)(n.td,{})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"ejemplo",children:"Ejemplo."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"C\xf3digo de implementaci\xf3n."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:'// La interfaz mediadora declara un m\xe9todo utilizado por los\r\n// componentes para notificar al mediador sobre varios eventos.\r\n// El mediador puede reaccionar a estos eventos y pasar la\r\n// ejecuci\xf3n a otros componentes.\r\ninterface Mediator is\r\n    method notify(sender: Component, event: string)\r\n\r\n\r\n// La clase concreta mediadora. La red entrecruzada de\r\n// conexiones entre componentes individuales se ha desenredado y\r\n// se ha colocado dentro de la mediadora.\r\nclass AuthenticationDialog implements Mediator is\r\n    private field title: string\r\n    private field loginOrRegisterChkBx: Checkbox\r\n    private field loginUsername, loginPassword: Textbox\r\n    private field registrationUsername, registrationPassword,\r\n                  registrationEmail: Textbox\r\n    private field okBtn, cancelBtn: Button\r\n\r\n    constructor AuthenticationDialog() is\r\n        // Crea todos los objetos del componente y pasa el\r\n        // mediador actual a sus constructores para establecer\r\n        // v\xednculos.\r\n\r\n    // Cuando sucede algo con un componente, notifica al\r\n    // mediador, que al recibir la notificaci\xf3n, puede hacer\r\n    // algo por su cuenta o pasar la solicitud a otro\r\n    // componente.\r\n    method notify(sender, event) is\r\n        if (sender == loginOrRegisterChkBx and event == "check")\r\n            if (loginOrRegisterChkBx.checked)\r\n                title = "Log in"\r\n                // 1. Muestra los componentes del formulario de\r\n                // inicio de sesi\xf3n.\r\n                // 2. Esconde los componentes del formulario de\r\n                // registro.\r\n            else\r\n                title = "Register"\r\n                // 1. Muestra los componentes del formulario de\r\n                // registro.\r\n                // 2. Esconde los componentes del formulario de\r\n                // inicio de sesi\xf3n.\r\n\r\n        if (sender == okBtn && event == "click")\r\n            if (loginOrRegister.checked)\r\n                // Intenta encontrar un usuario utilizando las\r\n                // credenciales de inicio de sesi\xf3n.\r\n                if (!found)\r\n                    // Muestra un mensaje de error sobre el\r\n                    // campo de inicio de sesi\xf3n.\r\n            else\r\n                // 1. Crea una cuenta de usuario utilizando\r\n                // informaci\xf3n de los campos de registro.\r\n                // 2. Ingresa a ese usuario.\r\n                // ...\r\n\r\n\r\n// Los componentes se comunican con un mediador utilizando la\r\n// interfaz mediadora. Gracias a ello, puedes utilizar los\r\n// mismos componentes en otros contextos vincul\xe1ndolos con\r\n// diferentes objetos mediadores.\r\nclass Component is\r\n    field dialog: Mediator\r\n\r\n    constructor Component(dialog) is\r\n        this.dialog = dialog\r\n\r\n    method click() is\r\n        dialog.notify(this, "click")\r\n\r\n    method keypress() is\r\n        dialog.notify(this, "keypress")\r\n\r\n// Los componentes concretos no hablan entre s\xed. S\xf3lo tienen un\r\n// canal de comunicaci\xf3n, que es el env\xedo de notificaciones al\r\n// mediador.\r\nclass Button extends Component is\r\n    // ...\r\n\r\nclass Textbox extends Component is\r\n    // ...\r\n\r\nclass Checkbox extends Component is\r\n    method check() is\r\n        dialog.notify(this, "check")\r\n    // ...\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"analog\xeda",children:"Analog\xeda."}),"\n",(0,i.jsx)(n.p,{children:"Los pilotos de los aviones que llegan o salen del \xe1rea de control del aeropuerto no se comunican directamente entre s\xed. En lugar de eso, hablan con un controlador de tr\xe1fico a\xe9reo, que est\xe1 sentado en una torre alta cerca de la pista de aterrizaje. Sin el controlador de tr\xe1fico a\xe9reo, los pilotos tendr\xedan que ser conscientes de todos los aviones en las proximidades del aeropuerto y discutir las prioridades de aterrizaje con un comit\xe9 de decenas de otros pilotos. Probablemente, esto provocar\xeda que las estad\xedsticas de accidentes a\xe9reos se dispararan."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://refactoring.guru/images/patterns/diagrams/mediator/live-example.png",alt:"Mediator"})}),"\n",(0,i.jsx)(n.p,{children:"La torre no necesita controlar el vuelo completo. S\xf3lo existe para imponer l\xedmites en el \xe1rea de la terminal porque el n\xfamero de actores implicados puede resultar dif\xedcil de gestionar para un piloto."})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>t});var r=o(6540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);